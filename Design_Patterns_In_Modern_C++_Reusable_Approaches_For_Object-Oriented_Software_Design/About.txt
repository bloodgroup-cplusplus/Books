Working On Legacy Code
Re-reading Code Multiple Times to get the part you need
Hard to Understand what a method does
Spending a lot of time to fix a minor bug
You spend more time reading than writing code



Working on a Startup Product
In charge of the development Process
Constantly adding new features
No formal process
Very dynamic environment, not time to worry about code stucture
What is it like to go back to your code after 2 years


The Purpose of Solid Design Principles
* To make the code more maintainable
* To make it easier to quickly extend the system with new funcionality without 
* breaking the existing ones
* To make the code easier to read and understand, thus spend less time figuring out what it does and more time actually developing the solution.
* Introduced by Robert Martin( Uncle Bob) named by Micheal Feathers


s=SINGLE RESPONSIBILITY PRINCIPLE

  "A class should have one, and ony one, reason to change"
  
  
 Single Responsibility Principle
  * A class should only be responsible for one thing.
  * There's a place for everyting and everytihng is in its place
  * Find one reason to change and take everything out of the class.
  * Very Precise names for many small classes > generic names for large classes
  check out the  cppfile single_responsibility_principle.cpp
  
  /**
    Store a newly created resource in storage.
    @param \Illuminate\Http\Request $request
    @param \App\User   $user
    @return \Illuminate\Http\Response
    
    public function store( Request $request, User $user)
    {
      $validated Data= 
........................... this is a laravel code see it on you tube ...................

O = OPEN/ CLOSED PRINCIPLE
* An entity should be open for extension but closed for modification
* Extend functionality by adding new code instead of changing existing code
* Seperate the behaviours, so the system can easily be extended, but never broken.
* Goal: get to a point where you can never break the core of your system.
*the goal is to get the system to a stable point
* say we have a payment that handles payment processing and currently we have the support for
* paypal and credit card and we have a method handling the payment processing.

public function pay( Request $request)
{
    $payment=new Payment();
    if($type=='credit')
    {
        $payment->payWithCreditCard();
    }
    
    else
    {
        $payment->payWithPaypal();
    }
    
 }
 
 so what if we want to add new payment
 
 now we have the payment class
 
 class Payment
 {
    pubic function payWithCreditCard()
    {
        // logic for paying with credit card
    }
    
    public function payWithPaypal()
    {
        // logic for paying with paypal
    }
    
  }
  // so if we want to extend it via wire transfers when we pay online
  // so how add is  in the function pay we add one more else
  // else
      {
            $payment->payWithWireTransfer();
      }
      
      and in our payment class we add
      
      class Payment
      {
          public function payWithCreditCard()
          {
              // logic for paying with credit card
           }
           
           public function payWithPaypal()
            {
                // logic for paying with paypal
                
             }
             
             
           public function payWithWireTransfer()
            {
                  // logic for paying with wire transfer
             }
             
         }
         
         
         so if we add cupon payment we will add another e
         lse if  again modify the payment class and so on and on and on ..
         
 *This is the point where we tend to violate the open source principle by making 
 *Modifications here and there even though they seem unrelated, the change in one
 *Function could cause a change in another.
check out the second c++ example above its called open_closed.cpp   
