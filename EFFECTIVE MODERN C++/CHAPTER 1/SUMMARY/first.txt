
Type deduction for templates is the basis for one of modern C++'s most compelling features:
AUTO
When the template type deduction rules are applied in the context of auto, they
sometimes seem less intuitive than when they're applied to templates.
It's good to understand the aspects of template type deduction that auto builds on.



Things to Remember
• During template type deduction, arguments that are references are treated as
non-references, i.e., their reference-ness is ignored.
• When deducing types for universal reference parameters, lvalue arguments get
special treatment.
• When deducing types for by-value parameters, const and/or volatile argu‐
ments are treated as non-const and non-volatile.
• During template type deduction, arguments that are array or function names
decay to pointers, unless they’re used to initialize references.
